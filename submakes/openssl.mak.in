define(`R2_PKG', `openssl')dnl
define(`R2_VERSION', `1.1.1n')dnl
define(`R2_DIR', `R2_PKG-R2_VERSION')dnl
define(`R2_DIST', `R2_DIR.tar.gz')dnl
define(`R2_URL', `https://www.openssl.org/source/R2_DIST')dnl

include(`r2.m4')

R2_DECLS
R2_RULE_UNPACK

UNAME := $(shell uname)

ifeq ($(UNAME), Darwin)
EXTRA_CFG = no-shared darwin64-x86_64-cc
else
ifeq ($(shell uname -m),i686)
EXTRA_CFG = no-shared linux-elf -fPIC -m32
endif
ifeq ($(shell uname -m),aarch64)
EXTRA_CFG = no-shared linux-aarch64 -fPIC
endif
ifeq ($(shell uname -m),x86_64)
EXTRA_CFG = no-shared linux-x86_64 -fPIC
endif
endif

ifeq ($(SCHROOT_CHROOT_NAME),trusty-amd64)
CURLFLAGS = -k
endif

openssl.args := \
	--prefix=$(pfx) \
	--openssldir=$(pfx)/openssl \
	shared no-idea no-mdc2 no-rc5 no-zlib no-ssl3 enable-unit-test no-ssl3-method enable-rfc3779 enable-cms no-capieng \
	$(EXTRA_CFG)

.openssl.fetch:
	mkdir -p $(CWD)/dists && cd $(CWD)/dists && \
		if [ ! -f $(openssl.tgz) ]; then curl $(CURLFLAGS) -O $(openssl.url); fi && \
	touch -a $(CWD)/.openssl.fetch

.openssl.config: .openssl.unpack .zlib.install
	cd R2_BUILD/$(openssl.dir) && \
	CC=$(CC) CXX=$(CXX) CPPFLAGS="$(CPPFLAGS)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" \
	./Configure $(openssl.args)
	touch $(CWD)/$@

.openssl.make: .openssl.config
	cd R2_BUILD/$(openssl.dir) && \
	$(MAKE)
	touch $(CWD)/$@

# the install target includes install_doc, which is fucked up
.openssl.install: .openssl.make
	cd R2_BUILD/$(openssl.dir) && \
	$(MAKE) install_sw DESTDIR=$(DESTDIR)
	touch $(CWD)/$@

.R2_PKG.clean:
	rm -rf R2_BUILD/$(R2_PKG.dir) .R2_PKG.*
GLOBAL_CLEAN += .R2_PKG.clean

.R2_PKG.distclean:
	# rm -f R2_DISTS/$(R2_PKG.tgz)

GLOBAL_DISTCLEAN += .R2_PKG.distclean
